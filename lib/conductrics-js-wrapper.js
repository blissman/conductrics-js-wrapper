// Generated by CoffeeScript 1.7.1
(function() {
  var CookieLite, MicroAjax,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  window.ConductricsJS = (function() {
    var debounce, keepId, qsformat, _batchItem, _batchSend;

    function ConductricsJS(owner, apikey, opts) {
      var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _ref;
      this.owner = owner;
      this.apikey = apikey;
      this.opts = opts != null ? opts : {};
      this.send = __bind(this.send, this);
      this.goal = __bind(this.goal, this);
      this.decision = __bind(this.decision, this);
      if ((_base = this.opts).server == null) {
        _base.server = '//api.conductrics.com';
      }
      if ((_base1 = this.opts).timeout == null) {
        _base1.timeout = 5000;
      }
      if ((_base2 = this.opts).cookies == null) {
        _base2.cookies = {
          ttl: 60 * 60 * 24 * 30,
          path: '/'
        };
      }
      if ((_base3 = this.opts).scodestore == null) {
        _base3.scodestore = CookieLite;
      }
      if ((_base4 = this.opts).session == null) {
        _base4.session = typeof (_base5 = this.opts).scodestore === "function" ? _base5.scodestore('mpid') : void 0;
      }
      if ((_base6 = this.opts).transport == null) {
        _base6.transport = MicroAjax;
      }
      if ((_base7 = this.opts).batching == null) {
        _base7.batching = 'off';
      }
      if ((_ref = this.opts.batching) === 'auto' || _ref === 'manual') {
        this.batchStart();
      }
    }

    ConductricsJS.prototype.decision = function(agent, opts, cb) {
      var fb, key, url, val, _ref;
      if (opts == null) {
        opts = {};
      }
      if (cb == null) {
        cb = null;
      }
      url = [agent, 'decisions'];
      fb = null;
      if (opts.choices != null) {
        _ref = opts.choices;
        for (key in _ref) {
          val = _ref[key];
          if (!((val != null ? val.join : void 0) != null)) {
            continue;
          }
          url.push("" + key + ":" + (val.join(',')));
          if (fb == null) {
            fb = {};
          }
          if (!fb[key]) {
            fb[key] = {
              code: val[0]
            };
          }
        }
        delete opts.choices;
      }
      if (opts.fallback != null) {
        fb = opts.fallback;
        delete opts.fallback;
      }
      return this.send(url, opts, null, true, (function(_this) {
        return function(res) {
          var selection, _ref1;
          keepId(_this.opts, res != null ? res.session : void 0);
          if (cb == null) {
            return;
          }
          selection = (_ref1 = res != null ? res.decisions : void 0) != null ? _ref1 : fb;
          return cb(selection, res != null ? res.session : void 0);
        };
      })(this));
    };

    ConductricsJS.prototype.goal = function(agent, opts, cb) {
      var url;
      url = [agent, 'goal'];
      if (opts.goal != null) {
        url.push(opts.goal);
        delete opts.goal;
      }
      return this.send(url, opts, null, true, (function(_this) {
        return function(res) {
          var success;
          keepId(_this.opts, res != null ? res.session : void 0);
          if (cb == null) {
            return;
          }
          success = (res != null ? res.session : void 0) != null;
          return cb(success, res != null ? res.session : void 0);
        };
      })(this));
    };

    ConductricsJS.prototype.send = function(url, data, body, batchable, cb) {
      var _ref;
      data.apikey = this.apikey;
      if (this.opts.session != null) {
        data.session = this.opts.session;
      }
      data._t = new Date().getTime();
      if (batchable && ((_ref = this.opts.batching) === 'auto' || _ref === 'manual')) {
        this.batch.push(_batchItem(url, data, cb));
        if (this.opts.batching === 'auto') {
          _batchSend(this);
        }
        return;
      }
      url = "" + this.opts.server + "/" + this.owner + "/" + (url.join('/')) + "?" + (qsformat(data));
      return new this.opts.transport(url, body, this.opts.timeout, (function(_this) {
        return function(text) {
          var e, res;
          try {
            res = JSON.parse(text);
            return cb(res);
          } catch (_error) {
            e = _error;
            return cb(null);
          }
        };
      })(this));
    };

    qsformat = function(data) {
      var k, qs, v;
      qs = '';
      for (k in data) {
        v = data[k];
        qs += "&" + k + "=" + (escape(v));
      }
      return qs;
    };

    keepId = function(opts, session) {
      if ((session != null) && (opts.cookies != null)) {
        opts.session = session;
        return typeof opts.scodestore === "function" ? opts.scodestore('mpid', session, opts.cookies) : void 0;
      }
    };

    debounce = function(ms, f) {
      var timeout;
      timeout = null;
      return function() {
        var a;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        clearTimeout(timeout);
        return setTimeout(((function(_this) {
          return function() {
            return f.apply(_this, a);
          };
        })(this)), ms);
      };
    };

    ConductricsJS.prototype.batchStart = function() {
      return this.batch = [];
    };

    ConductricsJS.prototype.batchSend = function() {
      var batched, url;
      url = ['-', 'batch'];
      batched = this.batch.concat();
      this.batchStart();
      if (!(batched.length > 0)) {
        return;
      }
      return this.send(url, {}, batched, false, function(results) {
        var i, item, _results;
        _results = [];
        for (i in batched) {
          item = results != null ? results[i] : void 0;
          _results.push(batched[i].cb(item != null ? item.data : void 0));
        }
        return _results;
      });
    };

    _batchSend = debounce(20, function(self) {
      return self.batchSend();
    });

    _batchItem = function(url, data, cb) {
      var item;
      item = {
        agent: url[0],
        type: url[1],
        query: data,
        cb: cb
      };
      switch (item.type) {
        case 'decisions':
          if (url.length > 2) {
            item.choices = url.slice(2).join('/');
          }
          break;
        case 'goal':
          if (url.length > 2) {
            item.goal = url[2];
          }
      }
      return item;
    };

    return ConductricsJS;

  })();

  CookieLite = function(name, value, opts) {
    var str;
    if (arguments.length > 1) {
      str = name + "=" + escape(value) + (opts.ttl != null ? "; expires=" + new Date(+new Date() + (1e3 * opts.ttl)).toUTCString() : "") + (opts.path != null ? "; path=" + opts.path : "");
      (opts.domain != null ? "; domain=" + opts.domain : "") + (opts.secure != null ? "; secure" : "");
      return document.cookie = str;
    }
    return unescape((("; " + document.cookie).split("; " + name + "=")[1] || "").split(";")[0]);
  };

  MicroAjax = (function() {
    var createRequest;

    function MicroAjax(url, body, timeout, callback) {
      var req;
      req = createRequest(url, body);
      if (req == null) {
        return callback(null);
      }
      if (typeof timeout === 'number') {
        req.timeout = timeout;
      }
      req.onload = function() {
        return callback(req.responseText);
      };
      req.onerror = req.ontimeout = function() {
        return callback(null);
      };
      if (body != null) {
        req.setRequestHeader('Content-Type', 'application/json');
        req.send(JSON.stringify(body));
      } else {
        req.send();
      }
    }

    createRequest = function(url, body) {
      var method, xhr;
      method = body != null ? 'POST' : 'GET';
      if (typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null) {
        xhr = new XMLHttpRequest();
      }
      if ((xhr != null ? xhr.withCredentials : void 0) != null) {
        xhr.open(method, url, true);
      } else if (typeof XDomainRequest !== "undefined" && XDomainRequest !== null) {
        xhr = new XDomainRequest();
        xhr.open(method, url);
      } else {
        xhr = null;
      }
      return xhr;
    };

    return MicroAjax;

  })();

}).call(this);
