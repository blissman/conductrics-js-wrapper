// Generated by CoffeeScript 1.6.3
(function() {
  var MicroAjax,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ConductricsJS = (function() {
    var qsformat;

    function ConductricsJS(owner, apikey, options) {
      var _base, _base1, _base2;
      this.owner = owner;
      this.apikey = apikey;
      this.options = options != null ? options : {};
      this.send = __bind(this.send, this);
      this.goal = __bind(this.goal, this);
      this.decision = __bind(this.decision, this);
      if ((_base = this.options).server == null) {
        _base.server = 'http://api.conductrics.com';
      }
      if ((_base1 = this.options).timeout == null) {
        _base1.timeout = 5000;
      }
      if ((_base2 = this.options).transport == null) {
        _base2.transport = MicroAjax;
      }
    }

    ConductricsJS.prototype.decision = function(agent, options, callback) {
      var endpoint, fallback, key, val, _ref;
      if (options == null) {
        options = {};
      }
      if (callback == null) {
        callback = null;
      }
      endpoint = [agent, 'decisions'];
      fallback = null;
      if (options.choices != null) {
        _ref = options.choices;
        for (key in _ref) {
          val = _ref[key];
          if (!((val != null ? val.join : void 0) != null)) {
            continue;
          }
          endpoint.push("" + key + ":" + (val.join(',')));
          if (fallback == null) {
            fallback = {};
          }
          if (!fallback[key]) {
            fallback[key] = {
              code: val[0]
            };
          }
        }
        delete options.choices;
      }
      return this.send(endpoint, options, function(response) {
        var selection, _ref1;
        if (callback == null) {
          return;
        }
        selection = (_ref1 = response != null ? response.decisions : void 0) != null ? _ref1 : fallback;
        return callback(selection);
      });
    };

    ConductricsJS.prototype.goal = function(agent, options, callback) {
      var endpoint;
      endpoint = [agent, 'goal'];
      if (options.goal != null) {
        endpoint.push(options.goal);
        delete options.goal;
      }
      return this.send(endpoint, options, callback);
    };

    ConductricsJS.prototype.send = function(endpoint, data, callback) {
      var url,
        _this = this;
      if (data == null) {
        data = {};
      }
      data.apikey = this.apikey;
      data._t = new Date().getTime();
      url = "" + this.options.server + "/" + this.owner + "/" + (endpoint.join('/')) + "?" + (qsformat(data));
      return new this.options.transport(url, this.options.timeout, function(res) {
        var e;
        try {
          return callback(JSON.parse(res));
        } catch (_error) {
          e = _error;
          return callback(null);
        }
      });
    };

    qsformat = function(data) {
      var k, qs, v;
      qs = '';
      for (k in data) {
        v = data[k];
        qs += "&" + k + "=" + (escape(v));
      }
      return qs;
    };

    return ConductricsJS;

  })();

  MicroAjax = (function() {
    var createRequest;

    function MicroAjax(url, timeout, callback) {
      var req;
      req = createRequest(url);
      if (req == null) {
        return callback(null);
      }
      if (typeof timeout === 'number') {
        req.timeout = timeout;
      }
      req.onload = function() {
        return callback(req.responseText);
      };
      req.onerror = req.ontimeout = function() {
        return callback(null);
      };
      req.send();
    }

    createRequest = function(url) {
      var xhr;
      if (typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null) {
        xhr = new XMLHttpRequest();
      }
      if ((xhr != null ? xhr.withCredentials : void 0) != null) {
        xhr.open('GET', url, true);
      } else if (typeof XDomainRequest !== "undefined" && XDomainRequest !== null) {
        xhr = new XDomainRequest();
        xhr.open('GET', url);
      } else {
        xhr = null;
      }
      return xhr;
    };

    return MicroAjax;

  })();

}).call(this);
